// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.metafinanz.mam.backend.repository;

import de.metafinanz.mam.backend.repository.Office;
import de.metafinanz.mam.backend.repository.OfficeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect OfficeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OfficeDataOnDemand: @Component;
    
    private Random OfficeDataOnDemand.rnd = new SecureRandom();
    
    private List<Office> OfficeDataOnDemand.data;
    
    public Office OfficeDataOnDemand.getNewTransientOffice(int index) {
        Office obj = new Office();
        setAddress(obj, index);
        setCity(obj, index);
        setLatitude(obj, index);
        setLongitude(obj, index);
        setName(obj, index);
        setPostalCode(obj, index);
        return obj;
    }
    
    public void OfficeDataOnDemand.setAddress(Office obj, int index) {
        String address = "address_" + index;
        if (address.length() > 200) {
            address = address.substring(0, 200);
        }
        obj.setAddress(address);
    }
    
    public void OfficeDataOnDemand.setCity(Office obj, int index) {
        String city = "city_" + index;
        if (city.length() > 100) {
            city = city.substring(0, 100);
        }
        obj.setCity(city);
    }
    
    public void OfficeDataOnDemand.setLatitude(Office obj, int index) {
        Double latitude = new Integer(index).doubleValue();
        obj.setLatitude(latitude);
    }
    
    public void OfficeDataOnDemand.setLongitude(Office obj, int index) {
        Double longitude = new Integer(index).doubleValue();
        obj.setLongitude(longitude);
    }
    
    public void OfficeDataOnDemand.setName(Office obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void OfficeDataOnDemand.setPostalCode(Office obj, int index) {
        Integer postalCode = new Integer(index);
        obj.setPostalCode(postalCode);
    }
    
    public Office OfficeDataOnDemand.getSpecificOffice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Office obj = data.get(index);
        Long id = obj.getId();
        return Office.findOffice(id);
    }
    
    public Office OfficeDataOnDemand.getRandomOffice() {
        init();
        Office obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Office.findOffice(id);
    }
    
    public boolean OfficeDataOnDemand.modifyOffice(Office obj) {
        return false;
    }
    
    public void OfficeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Office.findOfficeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Office' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Office>();
        for (int i = 0; i < 10; i++) {
            Office obj = getNewTransientOffice(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
