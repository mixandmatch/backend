// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.metafinanz.mixmatchresttest.web;

import de.metafinanz.mixmatchresttest.domain.Location;
import de.metafinanz.mixmatchresttest.web.LocationController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect LocationController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{locationID}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.showJson(@PathVariable("locationID") Long locationID) {
        Location location = Location.findLocation(locationID);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (location == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(location.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Location> result = Location.findAllLocations();
        return new ResponseEntity<String>(Location.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.createFromJson(@RequestBody String json) {
        Location location = Location.fromJsonToLocation(json);
        location.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.createFromJsonArray(@RequestBody String json) {
        for (Location location: Location.fromJsonArrayToLocations(json)) {
            location.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{locationID}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.updateFromJson(@RequestBody String json, @PathVariable("locationID") Long locationID) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Location location = Location.fromJsonToLocation(json);
        if (location.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{locationID}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.deleteFromJson(@PathVariable("locationID") Long locationID) {
        Location location = Location.findLocation(locationID);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (location == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        location.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByLocationNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByLocationNameLike(@RequestParam("locationName") String locationName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByLocationNameLike(locationName).getResultList()), headers, HttpStatus.OK);
    }
    
}
