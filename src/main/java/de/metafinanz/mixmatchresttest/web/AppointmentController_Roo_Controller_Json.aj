// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.metafinanz.mixmatchresttest.web;

import de.metafinanz.mixmatchresttest.domain.Appointment;
import de.metafinanz.mixmatchresttest.domain.Location;
import de.metafinanz.mixmatchresttest.domain.UserE;
import de.metafinanz.mixmatchresttest.web.AppointmentController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect AppointmentController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{appointmentID}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppointmentController.showJson(@PathVariable("appointmentID") Long appointmentID) {
        Appointment appointment = Appointment.findAppointment(appointmentID);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (appointment == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(appointment.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppointmentController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Appointment> result = Appointment.findAllAppointments();
        return new ResponseEntity<String>(Appointment.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AppointmentController.createFromJson(@RequestBody String json) {
        Appointment appointment = Appointment.fromJsonToAppointment(json);
        appointment.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AppointmentController.createFromJsonArray(@RequestBody String json) {
        for (Appointment appointment: Appointment.fromJsonArrayToAppointments(json)) {
            appointment.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{appointmentID}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AppointmentController.updateFromJson(@RequestBody String json, @PathVariable("appointmentID") Long appointmentID) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Appointment appointment = Appointment.fromJsonToAppointment(json);
        if (appointment.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{appointmentID}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AppointmentController.deleteFromJson(@PathVariable("appointmentID") Long appointmentID) {
        Appointment appointment = Appointment.findAppointment(appointmentID);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (appointment == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        appointment.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAppointmentLocation", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppointmentController.jsonFindAppointmentsByAppointmentLocation(@RequestParam("appointmentLocation") Location appointmentLocation) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Appointment.toJsonArray(Appointment.findAppointmentsByAppointmentLocation(appointmentLocation).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByOwnerID", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AppointmentController.jsonFindAppointmentsByOwnerID(@RequestParam("ownerID") UserE ownerID) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Appointment.toJsonArray(Appointment.findAppointmentsByOwnerID(ownerID).getResultList()), headers, HttpStatus.OK);
    }
    
}
