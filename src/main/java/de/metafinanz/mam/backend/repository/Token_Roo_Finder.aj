// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.metafinanz.mam.backend.repository;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Token_Roo_Finder {
    
    public static Long Token.countFindTokensByTokenString(String tokenString) {
        if (tokenString == null || tokenString.length() == 0) throw new IllegalArgumentException("The tokenString argument is required");
        EntityManager em = Token.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Token AS o WHERE o.tokenString = :tokenString", Long.class);
        q.setParameter("tokenString", tokenString);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Token> Token.findTokensByTokenString(String tokenString) {
        if (tokenString == null || tokenString.length() == 0) throw new IllegalArgumentException("The tokenString argument is required");
        EntityManager em = Token.entityManager();
        TypedQuery<Token> q = em.createQuery("SELECT o FROM Token AS o WHERE o.tokenString = :tokenString", Token.class);
        q.setParameter("tokenString", tokenString);
        return q;
    }
    
    public static TypedQuery<Token> Token.findTokensByTokenString(String tokenString, String sortFieldName, String sortOrder) {
        if (tokenString == null || tokenString.length() == 0) throw new IllegalArgumentException("The tokenString argument is required");
        EntityManager em = Token.entityManager();
        String jpaQuery = "SELECT o FROM Token AS o WHERE o.tokenString = :tokenString";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Token> q = em.createQuery(jpaQuery, Token.class);
        q.setParameter("tokenString", tokenString);
        return q;
    }
    
}
